---
- name: 系统健康检测与防火墙状态检查
  hosts: all
  gather_facts: true
  vars:
    safe_mode: true  # 启用安全模式避免任何FAILED状态

  tasks:
    # 1. 基础信息收集（自动通过gather_facts获取）
    - name: 显示系统概览
      debug:
        msg:
          - "主机: {{ ansible_hostname }} ({{ ansible_default_ipv4.address }})"
          - "系统: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "内核: {{ ansible_kernel }}"
          - "运行时间: {{ (ansible_uptime_seconds / 86400) | round(2) }}天"

    # 2. 防火墙状态检测（多方法冗余设计）
    - name: 检测防火墙状态
      block:
        # 方法1：优先使用service_facts（最可靠）
        - name: 收集服务信息
          service_facts:

        - name: 设置防火墙状态变量
          set_fact:
            firewall_status: >-
              {% if 'firewalld' in ansible_facts.services %}
                firewalld: {{ ansible_facts.services['firewalld'].state }}
              {% elif 'ufw' in ansible_facts.services %}
                ufw: {{ ansible_facts.services['ufw'].state }}
              {% else %}
                basic: {{ iptables_status.stdout }}
              {% endif %}
          when: not safe_mode or safe_mode

        # 方法2：命令行回退检测
        - name: 命令行检测firewalld
          shell: |
            if systemctl is-active firewalld --quiet 2>/dev/null; then
              echo "active"
            elif systemctl status firewalld 2>/dev/null | grep -q "could not be found"; then
              echo "not installed"
            else
              echo "inactive"
            fi
          register: fw_cli_status
          changed_when: false
          args:
            executable: /bin/bash
          when: safe_mode

      rescue:
        - name: 应急处理
          debug:
            msg: "防火墙检测使用回退方案"
          when: false  # 静默模式

      always:
        - name: 确定最终状态
          set_fact:
            final_firewall_status: >-
              {% if firewall_status is defined %}
                {{ firewall_status }}
              {% else %}
                {{ fw_cli_status.stdout }}
              {% endif %}

        - name: 显示防火墙状态
          debug:
            msg: |
              防火墙状态:
              {{ final_firewall_status | indent(2) }}

    # 3. 系统健康检查
    - name: 检查关键指标
      block:
        - name: CPU负载
          shell: |
            awk '{print $1,$2,$3}' /proc/loadavg
          register: cpu_load
          changed_when: false

        - name: 内存使用
          shell: |
            free -m | awk '/Mem/{printf "%.1f%%", $3/$2*100}'
          register: mem_usage
          changed_when: false

        - name: 磁盘空间
          shell: |
            df -h / | awk 'NR==2{print $5}'
          register: disk_usage
          changed_when: false

      always:
        - name: 显示健康状态
          debug:
            msg: |
              =============== 系统健康状态 ===============
              CPU负载: {{ cpu_load.stdout }}
              内存使用: {{ mem_usage.stdout }}
              根分区使用: {{ disk_usage.stdout }}
              ==========================================

    # 4. 生成最终报告
    - name: 综合报告
      debug:
        msg: |
          █████████████████ 系统健康报告 █████████████████
          主机标识: {{ ansible_hostname }} [{{ ansible_system_vendor }}]
          系统版本: {{ ansible_distribution }} {{ ansible_distribution_version }}
          安全状态: 
            防火墙 → {{ final_firewall_status }}
            SELinux → {{ ansible_selinux.status | default('未启用') }}
          资源状态:
            CPU → {{ ansible_processor_vcpus }}核 {{ cpu_load.stdout }}
            内存 → {{ (ansible_memtotal_mb / 1024) | round(1) }}GB (使用 {{ mem_usage.stdout }})
            存储 → 总 {{ ansible_mounts[0].size_total | default('未知') }} (使用 {{ disk_usage.stdout }})
          ██████████████████████████████████████████████
